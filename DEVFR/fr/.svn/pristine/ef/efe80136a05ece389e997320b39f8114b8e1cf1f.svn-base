package fr.uv1.bettingServices.player;
import java.util.ArrayList;
import java.util.Date;

import fr.uv1.bettingServices.competitor.Person;
import fr.uv1.bettingServices.exceptions.AuthenticationException;
import fr.uv1.bettingServices.exceptions.BadParametersException;



/**
 * Classe Player 
 * <br>
 *         This class declares all attributes and methods that should be provided by a
 *         player. <br>
 * @author debbabi, asamimoh <br>
 */ 

public class Player {

	/***********************************************************************
	 * DEFAULT PARAMETERS
	 ***********************************************************************/
	private static final String DEFAULT_PASSWORD = "0000";
	private static final long DEFAULT_TOKENS = 0L;
	
	/***********************************************************************
	 * MANAGER ATTRIBUTES
	 ***********************************************************************/
	private int id; 
	private String lastName;
    private String firstName;
    private String userName;
    private Date bornDate;
    private String pwdPlayer;
    private long nbTokens;

    /**
     * <br> Player Constructor with 4 arguments </br>
     * @param lastName
     * 			player's lastname
     * @param firstName
     * 			player's firstname	
     * @param username
     * 			player's username
     * @param borndate
     * 			player's borndate
     * @throws BadParametersException 
     * 			 raised if just one parameter above is null
     */
    public Player(String lastName, String firstName, String username, Date borndate) throws BadParametersException {
    	if(lastName == null || firstName == null || username == null || borndate == null) {
    		throw new BadParametersException();
    	}
    	
    	this.lastName = lastName;
        this.firstName = firstName;
        this.userName = username;
        this.bornDate = borndate;
        this.pwdPlayer= DEFAULT_PASSWORD;
        this.nbTokens= DEFAULT_TOKENS;
    }
    
    
    /** 
     * <br> Player Constructor with 5 arguments </br>
     * @param lastName
     * 			player's lastname
     * @param firstName
     * 			player's firstname
     * @param username
     * 			player's username
     * @param borndate
     * 			player's borndate
     * @param initialCredit
     * 			player's credit
     * @throws BadParametersException 
     * 			raised if just one parameter above is null except initialCredit
     */
    public Player(String lastName, String firstName, String username, Date borndate,long initialCredit) throws BadParametersException {
    	this(lastName, firstName, username, borndate);
        this.nbTokens= initialCredit;
    }
	
   

    /**
     * returns player's id
     * @return id
     */
    
	public int getId() {
		return id;
	}

	/**
	 * Sets player's id 
	 * @param id
	 */
	public void setId(int id) {
		this.id = id;
	}

	 /**
     * returns player's lastName 
     * @return
     */
    
	public String getLastName() {
		return lastName;
	}

	/**
	 * Sets player's lastName
	 * @param lastName
	 */
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}


	/**
	 * returns player's firstName
	 * @return
	 */
	public String getFirstName() {
		return firstName;
	}


	/**
	 * Sets player's firstName 
	 * @param firstName
	 */
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

 
	/**
	 * Returns player's username 
	 * @return
	 */
	public String getUserName() {
		return userName;
	}


	/**
	 * Sets player's username 
	 * @param userName
	 */
	public void setUserName(String userName) {
		this.userName = userName;
	}


	/**
	 * Returns player's borndate 
	 * @return
	 */
	public Date getBornDate() {
		return bornDate;
	}


	/**
	 * Sets player's borndate 
	 * @param bornDate
	 */
	public void setBornDate(Date bornDate) {
		this.bornDate = bornDate;
	}


	/**
	 * Returns player's password 
	 * @return
	 */
	public String getPwdPlayer() {
		return pwdPlayer;
	}


	/**
	 * Sets player's password 
	 * @param pwdPlayer
	 */
	public void setPwdPlayer(String pwdPlayer) {
		this.pwdPlayer = pwdPlayer;
	}
    
	
	/**
	 * Returns number of tokens 
	 * @return
	 */
	public long getNbTokens() {
		return nbTokens;
	}
	
	/**
	 * Sets number of tokens 
	 * @param nbTokens
	 */
	public void setNbTokens(long nbTokens) {
		this.nbTokens = nbTokens;
	}
	

    /**
     * changes current user password
     * 
     * @param newPwd
     *			new user password
     * @param currentPwd
     *			current user password
     * @throws AuthenticationException
     * 			raised if the player's passwords are not equals.
     * @throws BadParametersException 
     * 			raised if the current password or the new password are null.
     * 			
     * 
     */
    public boolean changeSubsPwd(String newPwd, String currentPwd) throws AuthenticationException, BadParametersException {
        if (newPwd == null || currentPwd == null) {
			throw new BadParametersException();
		}
        
        if(passwordVerified(currentPwd)){
            pwdPlayer = newPwd;
            return true;
        }
        
        return false;
    }
    
    /**
     * Checks if the entered user username and password are correct
     * @param userNameEntered
     * @param pwdPlayerEntered
     * @return
     * @throws AuthenticationException 
     * @throws BadParametersException 
     */
	public boolean authentificatePlayer(String userNameEntered,String pwdPlayerEntered) throws AuthenticationException, BadParametersException{
    	if (userNameEntered == null || pwdPlayerEntered == null) {
			throw new BadParametersException();
		}
		return (usernameVerified(userNameEntered) && passwordVerified(pwdPlayerEntered)) ? true : false;
    }

    /**
     * Increasing the subscriber number of tokens with an amount
     * @param numberTokens
     * @return
     * @throws BadParametersException 
     */
    public long creditSubscriber(long numberTokens) throws BadParametersException{
    	if (numberTokens == 0L) {
			throw new BadParametersException();
		}
    	
    	return numberTokens > 0 ? nbTokens += numberTokens : -1;
    }
    
    /**
     * Subtract a specific amount of tokens from the user credit
     * @param numberTokensToDebit
     * @return
     * @throws BadParametersException 
     */
    public long debitSubscriber(long numberTokensToDebit) throws BadParametersException{
    	if (numberTokensToDebit == 0L) {
			throw new BadParametersException();
		}
    	
    	return (numberTokensToDebit > 0 && numberTokensToDebit <= nbTokens) ? nbTokens -= numberTokensToDebit : -1;
    }
  
	public ArrayList<String> infosSubscriber(){
		ArrayList<String> list = new ArrayList<String>();
		list.add(lastName);
		list.add(firstName);
		list.add(userName);
		list.add(bornDate.toString());
		list.add(new Long(nbTokens).toString());
		return list;
	}
	
	/**
	 * Verify that the user password matches the entered password
	 * @param pwd
	 * @return
	 * @throws AuthenticationException
	 */
	private boolean passwordVerified(String enteredPassword) throws AuthenticationException {
		if(pwdPlayer.equals(enteredPassword)) {
			return true;
		} else {
			throw new AuthenticationException();
		}
	}
	
	/**
	 * Verify that the user username matches the entered username
	 * @param enteredUsername
	 * @return
	 * @throws AuthenticationException
	 */
	private boolean usernameVerified(String enteredUsername) throws AuthenticationException {
		if (userName.equals(enteredUsername)) {
			return true;
		} else {
			throw new AuthenticationException();
		}
	}
	
	/**
	 * Prints User full name, username, borndate and current number of tokens
	 * @return
	 */
	@Override
	public String toString() {
		return "Full name: " + lastName + " " + firstName + "\nusername: " + userName + 
				"\nbirthdate: " + bornDate.toString() + "\nNumbers of Tokens: " + new Long(nbTokens).toString();
	}
  
	@Override
	public boolean equals(Object other) {
		if (other == null)
			return false;
		if (!(other instanceof Player))
			return false;

		Player player = (Player) other;
		return (this.userName.equals(player.getUserName()));
	}
}
