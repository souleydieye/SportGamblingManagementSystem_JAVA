package fr.uv1.bettingServices.competitor;


import fr.uv1.bettingServices.db.DBConnection;
import fr.uv1.bettingServices.exceptions.BadParametersException;

import java.sql.*;

/**
 * @author Rochd MALIKI
 *
 */

public class PersonDAO {
	
	// Insert data in the database and get the Id of the competitor
	
	public static Person persist(Person person) {
		try (
			Connection c = DBConnection.newConnection()){
			c.setAutoCommit(false);
			//TODO: verify the column names
			PreparedStatement psPersist = c.prepareStatement("INSERT INTO Person(firstname, lastname, borndate) VALUES (?, ?, ?)");
			
			//the id will be auto-incremented 
			psPersist.setString(1, person.getFirstName());
			psPersist.setString(2, person.getLastName());
			psPersist.setDate(3, person.getBornDate());
			
			psPersist.executeUpdate();
			psPersist.close();
			
			//TODO : look how the creation of sequence is done
			PreparedStatement psIdValue = c
			.prepareStatement("select currval('idperson_seq') as idperson");
			
			ResultSet resultSet = psIdValue.executeQuery();
            resultSet.next();
			int id =  Integer.parseInt(resultSet.getString("idperson"));
			
			c.commit();
			//the auto-incremented iD will be settled in person object
			
			person.setId(id);
		} catch (SQLException e) {
            e.printStackTrace();
		}
		return person;
	}
	
	// Search for a specific competitor by his Id
	
	public static Person findById(int id) throws BadParametersException {
        Person competitor = null;
        try(Connection c = DBConnection.newConnection()) {
            PreparedStatement psSelect = c
                    .prepareStatement("SELECT * FROM person WHERE id=?");
            //TODO : change id to int in data base "FilRouge"
            psSelect.setInt(1, id);
            ResultSet resultSet = psSelect.executeQuery();
            while (resultSet.next()) {
                competitor = new Person(resultSet.getString("firstname"),
                        resultSet.getString("lastname"),
                        resultSet.getDate("borndate"));
            
            }
            c.commit();
            c.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        

        return competitor;
	}
	
	// Update the database
	
	public static void update(Person competitor) throws SQLException, ClassNotFoundException {
		Connection c = DBConnection.newConnection();
		PreparedStatement psUpdate = c
				.prepareStatement("update person set firtsname=?, lastname=?, borndate=? where id=?");
		
		psUpdate.setString(1, competitor.getFirstName());
		psUpdate.setString(2, competitor.getLastName());
		psUpdate.setDate(3, new java.sql.Date(competitor.getBornDate().getTime()));
		
		psUpdate.setInt(4, competitor.getId());
		psUpdate.executeUpdate();
		psUpdate.close();
		c.commit();
		c.close();
	}
	
	 // Delete a specific competitor
	
	public static void delete(Person competitor) throws SQLException, ClassNotFoundException {
		Connection c = DBConnection.newConnection();
		PreparedStatement psUpdate = c
				.prepareStatement("delete from person where id=?");
		psUpdate.setInt(1, competitor.getId());
		psUpdate.executeUpdate();
		psUpdate.close();
		c.commit();
		c.close();
	}
	
	// compu
}