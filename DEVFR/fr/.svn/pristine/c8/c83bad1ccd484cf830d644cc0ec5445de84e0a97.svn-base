package fr.uv1.bettingServices.manager;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Scanner;

import fr.uv1.bettingServices.player.*;
import fr.uv1.utils.DatabaseConnection;


public class PlayersManager {

	public Player subscribe(Player player) throws SQLException {

		/* on va creer une nouvelle connection à la base de donnée */
		Connection connection1 = DatabaseConnection.getConnection();

		try {

			/* avec cette preparedStatement on va inserer un Player à la base de données
			 *  initialement sans mot de passe et sans nombre de jetons
			 */
			PreparedStatement preparedStatement1 = connection1.prepareStatement("INSERT INTO player (last_name, first_name, "
					+ "user_name,"
					+ "password, born_date, credit) "
					+ "values (?, ?, ? , ? , ? , ?)");

			/*manque le problème que le username de player doit etre unique je vais vérifier ça après maintenant je fais la structure  :p */ 
			preparedStatement1.setString(1, player.getLastName());
			preparedStatement1.setString(2, player.getFirstName());
			preparedStatement1.setString(3, player.getUserName());
			preparedStatement1.setString(4, player.getPwdPlayer());
			preparedStatement1.setDate(5, java.sql.Date.valueOf(player.getBornDate().toString()));// car la valeur passée est de Type String
			// c'est le nombre de jetons par defaut 0
			preparedStatement1.setLong(6, 0);			
			/* faire de la mise à jour */
			preparedStatement1.executeUpdate();
			/* on va executer la prepared statement */
			preparedStatement1.close();
			/* on va fermer la preparedSTatement*/
			connection1.commit();
			/*on va valider avec commit les executions faites*/

		} catch (SQLException e1) {
			try {

				connection1.rollback();
				/*on va annuler les executions faites si un problème arrive avec rollback*/

			} catch (SQLException e2) {
				e1.printStackTrace();
				/*pour afficher les details de l'erreur pour le diagnostic pour mentionner ce qui arrivé
				 *  et dans quel bout de code il y a un problème */
			}
		}
		connection1.close();
		/*on ferme la connection */
		return player;
		/*on retourne le player pour une future utilisaiton*/
	}

	public static Player findPlayerByUserName(String username) throws SQLException {
		/* pareil on ouvre une nouvelle connection à la base */
		Connection connection1 = DatabaseConnection.getConnection();
		/* on prepare une prepared statemnet */
		PreparedStatement preparedStatement1 = connection1
				.prepareStatement("SELECT * FROM player WHERE username LIKE ?");
		preparedStatement1.setString(1, username);
		/* on va chercher dans la base tous les players avec username passé 
		 * en parametre mais vu qu'il y a un unique on obtiendra au plus un player s'il existe */
		ResultSet resultSet1 = preparedStatement1.executeQuery();
		/* on va mettre le resultat de la requete dans resultSet1*/
		Player playerRecherchee = null;
		/* on va maintenant chercher dans le resultat s'il y a player avec un username pareil */

		while (resultSet1.next()) {
			/*remarque tres importante pour ce qui suit:
			 * vu qu'on a un seul player au plus ( le username est unique) on va 
			 * trouver dans le resultSet au plus un element qui verifie ça
			 * et donc si il y a un resultSet.next c'est que il y a un element qui est trouvé 
			 * on va donc instancier directement un player et on sort de la boucle */
			playerRecherchee = new Player(
					resultSet1.getString("last_name"),
					resultSet1.getString("first_name"),
					resultSet1.getString("username"),
					resultSet1.getDate("born_date"),
					resultSet1.getLong("credit")
					);
		}

		resultSet1.close();
		preparedStatement1.close();
		connection1.close();

		return playerRecherchee;
	}

	
	
	/*	j'ai fait une décision de les manipuler après pour la mise comme mentionnée dans l'interface"
	 *  "java.util.List<java.util.List<java.lang.String>>" c'est à dire on va mettre ça ici juste une 
	 *  pour retourner un type pareil liste des players et on va les manupiler après "*/
	
	
	public static ArrayList<Player> listPlayers() throws SQLException {
		Connection connection1 = DatabaseConnection.getConnection();
		PreparedStatement preparedStatement1 = connection1
				.prepareStatement("SELECT * FROM player ORDER BY username, first_name, last_name");
		ResultSet resultSet1 = preparedStatement1.executeQuery();
		/*on va creer un liste pour contenir tous les elements trouves dans la resultset*/
		ArrayList<Player> playerList = new ArrayList<Player>();
		Player player = null;
		int count = 0;
		while (resultSet1.next()) {
			count ++;			
			player = new Player(
					resultSet1.getString("first_name"),
					resultSet1.getString("last_name"),
					resultSet1.getString("username"),
					resultSet1.getDate("born_date"),
					resultSet1.getLong("credit")
					);
			playerList.add(player);
		}
		resultSet1.close();
		preparedStatement1.close();
		connection1.close();

		return playerList;
	}

	
	
	public static Player update(Player player) throws SQLException {
		Connection connection1 = DatabaseConnection.getConnection();
		PreparedStatement preparedStatement1 = connection1
				.prepareStatement("UPDATE player SET last_name=?, first_name=?, born_date=?, credit=? WHERE username LIKE ?");
		/* mise à jour de tous les attributs d'un player spécifique*/
		
		preparedStatement1.setString(1, player.getLastName());	
		preparedStatement1.setString(2, player.getFirstName());
		preparedStatement1.setString(3, player.getUserName());
		preparedStatement1.setDate(4, java.sql.Date.valueOf(player.getBornDate().toString()));
		preparedStatement1.setLong(5, player.getNbTokens());	
		
		preparedStatement1.executeUpdate();
		
		preparedStatement1.close();
		
		connection1.close();
		/*retourner pour future utilisation*/ 
		return player;
	}
	
	public static Player changeSubsPwd(Player player,String newPwd, String currentPwd) throws SQLException {
		Connection connection1 = DatabaseConnection.getConnection();
		
		String testPassword=currentPwd;
		/*on va tester d'abord si le mot de passe ancien est correcte, pour cela on va chercher dans 
		 * la base de donner pour le player qui correspond à ce username et qui correspend à ce mot de passe */
		PreparedStatement preparedStatement1 = connection1
				.prepareStatement("SELECT * FROM player WHERE username LIKE ? AND password LIKE ?");
		preparedStatement1.setString(1, player.getUserName());
		preparedStatement1.setString(2, currentPwd);
		ResultSet resultSet1 = preparedStatement1.executeQuery();
		Player playerRecherchee = null;
		
		while (resultSet1.next()) {
			playerRecherchee = new Player(
					resultSet1.getString("last_name"),
					resultSet1.getString("first_name"),
					resultSet1.getString("username"),
					resultSet1.getDate("born_date"),
					resultSet1.getLong("credit")
					);
		}
		
		/* maintenant si le playRecherchee est trouve c'est à 
		 * dire que le mot de passe et le user name sont correctes donc playerRechercheee n'est pas null
		 *  il suffit donc d'executer la mise à jours*/
	
		if (playerRecherchee!=null){
			PreparedStatement preparedStatement2 = connection1.prepareStatement("UPDATE player SET password=? WHERE username LIKE ?");
			preparedStatement2.setString(1, newPwd);	
			preparedStatement2.setString(2, player.getUserName());
			preparedStatement2.executeUpdate();
			preparedStatement2.close();
		}
		resultSet1.close();
		preparedStatement1.close();
		connection1.close();
		if((playerRecherchee!=null)&& (playerRecherchee.changeSubsPwd(newPwd, currentPwd)))
			return player;
			
		else return null;
	}

	
		public static String unsubscribe(String username) throws SQLException {
			
		Connection connection1 = DatabaseConnection.getConnection();
		PreparedStatement preparedStatement1 = connection1
				.prepareStatement("DELETE FROM player WHERE username LIKE ?");
		preparedStatement1.setString(1, username );
		Scanner sc = new Scanner(System.in);
		int i = sc.nextInt();
		
		/*choix 0 pour la confirmation et 1 si non*/
		System.out.println("select 0 for confirmation and 1 if not");
		if(i==0){
			preparedStatement1.executeUpdate();
			preparedStatement1.close();
			connection1.close();
			return username+"deleted";
		}
		else{
			preparedStatement1.close();
			connection1.close();
			return "not deleted";

			}
		
	}
}






